{"version":3,"sources":["Header.js","Footer.js","SearchBar.js","Book.js","BookResults.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","SearchBar","props","onSubmit","getBooks","action","htmlFor","onChange","handleUserInput","type","placeholder","id","required","Book","href","info","target","rel","src","image","alt","title","author","year","BookResults","books","map","book","key","volumeInfo","imageLinks","thumbnail","authors","publishedDate","infoLink","Main","event","preventDefault","axios","url","method","responseType","params","q","state","userInput","then","response","setState","data","items","catch","error","alert","value","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"uRAYeA,EAVA,WAEX,OACI,4BAAQC,UAAU,UACd,6CCKGC,EATA,WAEX,OACI,gCACI,sE,QCSGC,EAbG,SAACC,GAEf,OACI,0BAAMC,SAAUD,EAAME,SAAUC,OAAO,IACnC,2BAAOC,QAAQ,eACf,2BAAOC,SAAUL,EAAMM,gBAAiBC,KAAK,OAAOC,YAAY,wCAAwCC,GAAG,aAAaC,UAAQ,IAChI,4BAAQH,KAAK,UAAb,YCWGI,EAjBF,SAACX,GAEV,OACI,yBAAKH,UAAU,kBACX,uBAAGe,KAAMZ,EAAMa,KAAMC,OAAQ,SAAUC,IAAK,uBACxC,yBAAKlB,UAAU,aACP,yBAAKmB,IAAKhB,EAAMiB,MAAOC,IAAKlB,EAAMmB,QAClC,sCAAYnB,EAAMmB,OAClB,uCAAanB,EAAMoB,QACnB,0CAAgBpB,EAAMqB,UCa/BC,EArBK,SAACtB,GAEjB,OACI,yBAAKH,UAAU,gBAEPG,EAAMuB,MAAMC,KAAI,SAACC,GACb,OAAO,kBAAC,EAAD,CACKC,IAAKD,EAAKhB,GACVQ,MAAOQ,EAAKE,WAAWC,WAAWC,UAClCV,MAAOM,EAAKE,WAAWR,MACvBC,OAAQK,EAAKE,WAAWG,QACxBT,KAAMI,EAAKE,WAAWI,cACtBlB,KAAMY,EAAKE,WAAWK,gB,iBCsCvCC,E,kDA/CX,WAAYjC,GAAQ,IAAD,8BACf,cAAMA,IAQVE,SAAW,SAACgC,GACRA,EAAMC,iBAENC,IAAM,CACNC,IAAI,8CACJC,OAAO,MACPC,aAAa,OACbC,OAAQ,CACJd,IAAI,0CACJe,EAAE,GAAD,OAAK,EAAKC,MAAMC,cAGpBC,MAAK,SAACC,GACH,EAAKC,SAAS,CACVvB,MAAM,YAAKsB,EAASE,KAAKC,YAE9BC,OAAM,SAAAC,GACLC,MAAM,6EA1BK,EA8BnB7C,gBAAkB,SAAC4B,GACf,EAAKY,SAAS,CACVH,UAAWT,EAAMpB,OAAOsC,SA9B5B,EAAKV,MAAQ,CACTnB,MAAO,GACPoB,UAAW,IAJA,E,qDAsCf,OACI,6BACI,kBAAC,EAAD,CAAWzC,SAAUmD,KAAKnD,SAAUI,gBAAiB+C,KAAK/C,kBAC1D,kBAAC,EAAD,CAAaiB,MAAO8B,KAAKX,MAAMnB,a,GA1C5B+B,aCoBJC,G,6KAhBX,OAEE,yBAAK1D,UAAU,OAEb,kBAAC,EAAD,MACA,0BAAMA,UAAU,WACd,kBAAC,EAAD,OAGF,kBAAC,EAAD,W,GAZUyD,cCMEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLqB,QAAQrB,MAAMA,EAAMsB,c","file":"static/js/main.2c45ff3a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n\n    return (\n        <header className=\"header\">\n            <h1>Book Finder</h1>\n        </header>\n    );\n}\n\n\nexport default Header;","import React from 'react';\n\nconst Footer = () => {\n\n    return (\n        <footer>\n            <p>Created by Louise de Loyola Â© 2020</p>\n        </footer>\n    );\n}\n\nexport default Footer;","import React from 'react';\n\nconst SearchBar = (props) => {\n\n    return (\n        <form onSubmit={props.getBooks} action=\"\">\n            <label htmlFor=\"search-bar\"></label>\n            <input onChange={props.handleUserInput} type=\"text\" placeholder=\"Search for your favourite book here..\" id=\"search-bar\" required/>\n            <button type=\"submit\">Search</button>\n\n        </form>\n    )\n}\n\n\nexport default SearchBar;","import React from 'react';\n\nconst Book = (props) => {\n\n    return (\n        <div className=\"book-container\">\n            <a href={props.info} target={\"_blank\"} rel={\"noopener noreferrer\"}>\n                <div className=\"book-info\">\n                        <img src={props.image} alt={props.title} />\n                        <h2>Title: {props.title}</h2>\n                        <h3>Author: {props.author}</h3>\n                        <h3>Published: {props.year}</h3>\n                </div>\n            </a>\n        </div>\n    );\n}\n\n\nexport default Book;","import React from 'react';\nimport Book from './Book';\n\nconst BookResults = (props) => {\n\n    return (\n        <div className=\"book-results\">\n            {\n                props.books.map((book) => {\n                    return <Book \n                                key={book.id}\n                                image={book.volumeInfo.imageLinks.thumbnail} \n                                title={book.volumeInfo.title}\n                                author={book.volumeInfo.authors}\n                                year={book.volumeInfo.publishedDate}\n                                info={book.volumeInfo.infoLink}\n                            />\n                })\n            }\n        </div>\n    );\n}\n\n\nexport default BookResults;","import React, { Component } from 'react';\nimport SearchBar from './SearchBar';\nimport BookResults from './BookResults';\nimport axios from 'axios';\n\nclass Main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            books: [],\n            userInput: \"\"\n        }\n    }\n\n\n    getBooks = (event) => {\n        event.preventDefault();\n\n        axios({\n        url: `https://www.googleapis.com/books/v1/volumes`,\n        method: `GET`,\n        responseType: `json`,\n        params: {\n            key: `AIzaSyCOKF-vmzUM8s4Rarpvh-3_cX6A2LG-KOo`,\n            q: `${this.state.userInput}`\n        }\n        })\n        .then((response) => {\n            this.setState({\n                books: [...response.data.items],\n            })\n        }).catch(error => {\n            alert(\"Could not find search query. Please check the spelling and try again.\")\n        })\n    }\n\n    handleUserInput = (event) => {\n        this.setState({\n            userInput: event.target.value\n        })\n    }\n\n\n    render() {\n        return (\n            <div>\n                <SearchBar getBooks={this.getBooks} handleUserInput={this.handleUserInput}/>\n                <BookResults books={this.state.books}/>\n            </div>\n        );\n    }\n}\n\nexport default Main;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Main from './Main';\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      \n      <div className=\"app\">\n\n        <Header />\n        <main className=\"wrapper\">\n          <Main />\n\n        </main>\n        <Footer />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}